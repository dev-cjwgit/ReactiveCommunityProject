version: '3.1'
services:
  # MySQL 서비스 설정
  rc-mariadb:
    image: mariadb  # 명확한 버전 지정 (원하는 버전으로 변경 가능)
    container_name: rc-mariadb
    environment:
      MYSQL_DATABASE: rcdb
      MYSQL_ROOT_PASSWORD: ss1235789
      MYSQL_USER: root             # 선택 사항: 사용자 지정
      MYSQL_PASSWORD: ss1235789     # 선택 사항: 사용자 지정 비밀번호
    volumes:
      - rc-mariadb:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - rc-network
    restart: unless-stopped

  # Redis 서비스 설정
  rc-redis:
    image: redis
    container_name: rc-redis
    ports:
      - "6379:6379"  # Redis 포트 매핑
    networks:
      - rc-network
    depends_on:
      - rc-mariadb
    restart: unless-stopped

  # Elasticsearch 서비스 설정
  rc-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    container_name: rc-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"                  # Elasticsearch 클러스터 포트
    volumes:
      - rc-elasticsearch:/usr/share/elasticsearch/data  # Elasticsearch 데이터 볼륨 설정
    networks:
      - rc-network
    depends_on:
      - rc-mariadb
    restart: unless-stopped

  rc-was:
    shm_size: "30gb"
    build: ./
    image: rc_deploy
    volumes:
      - rc-was:/usr/share/rc/data  # Elasticsearch 데이터 볼륨 설정
    restart: unless-stopped
    networks:
      - rc-network
    ports:
      - "9999:9999"
    depends_on:
      - rc-mariadb
      - rc-redis
      - rc-elasticsearch
      - rc-kafka

  rc-nginx:
    image: nginx:stable
    container_name: rc-nginx
    ports:
      - "80:80"  # 외부 포트
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - rc-was
    networks:
      - rc-network
    restart: unless-stopped

  rc-kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: rc-kafka
    ports:
      - "9092:9092"          # EXTERNAL
      - "9093:9093"          # CONTROLLER
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@rc-kafka:9093"

      # ─── 리스너 설정 ───
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://rc-kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # 👇 추가 — 브로커·컨트롤러 간 통신은 INTERNAL 리스너로
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      CLUSTER_ID: "EmptNWtoR4GGWx-BH6nGLQ"


  rc-kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: rc-kafka-ui
    ports:
      - "8989:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=rc-kafka:9092   # ← 하나면 충분
    networks:
      - rc-network
    depends_on:
      - rc-kafka
    restart: unless-stopped

# 데이터 저장을 위한 볼륨 설정
volumes:
  rc-mariadb: { }
  rc-elasticsearch: { }
  rc-was: { }

# 네트워크 설정
networks:
  rc-network:
    driver: bridge